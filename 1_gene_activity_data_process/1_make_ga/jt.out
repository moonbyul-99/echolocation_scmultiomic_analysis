nohup: ignoring input
2025-05-12 05:50:39 - INFO - begin processing bq data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 05:55:50 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 05:56:04 - INFO - raw scdata shape (8585, 0)
2025-05-12 05:56:05 - INFO - filtered scdata shape (4974, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 05:56:13 - INFO - begin processing ct data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:02:35 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:02:46 - INFO - raw scdata shape (13596, 0)
2025-05-12 06:02:47 - INFO - filtered scdata shape (7831, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 06:02:58 - INFO - begin processing hm data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:10:13 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:10:26 - INFO - raw scdata shape (11309, 0)
2025-05-12 06:10:27 - INFO - filtered scdata shape (6729, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 06:10:37 - INFO - begin processing ng data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:16:37 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:16:48 - INFO - raw scdata shape (15694, 0)
2025-05-12 06:16:49 - INFO - filtered scdata shape (8976, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 06:16:59 - INFO - begin processing qn data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:23:06 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:23:17 - INFO - raw scdata shape (14091, 0)
2025-05-12 06:23:18 - INFO - filtered scdata shape (7546, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 06:23:28 - INFO - begin processing pc data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:25:19 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:25:23 - INFO - raw scdata shape (14387, 0)
2025-05-12 06:25:23 - INFO - filtered scdata shape (604, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 06:25:26 - INFO - begin processing xq data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:32:56 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:33:09 - INFO - raw scdata shape (17961, 0)
2025-05-12 06:33:11 - INFO - filtered scdata shape (9470, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
2025-05-12 06:33:22 - INFO - begin processing yb data
--- Logging error ---
Traceback (most recent call last):
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py", line 50, in <module>
    logging.info(scdata.close(),scdata.is_closed())
Message: None
Arguments: (True,)
2025-05-12 06:38:59 - INFO - Computing fragment size distribution...
/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:97: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

/home/rsun@ZHANGroup.local/anaconda3/envs/snapatac/lib/python3.10/site-packages/snapatac2/plotting/__init__.py:98: FutureWarning:

Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`

2025-05-12 06:39:08 - INFO - raw scdata shape (12734, 0)
2025-05-12 06:39:09 - INFO - filtered scdata shape (6882, 0)
/home/rsun@ZHANGroup.local/sly_data/notebook/make_ga/1_jt_ga.py:80: FutureWarning:

ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy


... storing 'gene_symbol' as categorical
